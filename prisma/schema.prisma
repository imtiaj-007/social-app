// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum PostCategory {
  GENERAL
  ANNOUNCEMENT
  QUESTION
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
}

// Profile extends Supabase auth.users
model Profile {
  id        String  @id
  username  String  @unique
  email     String  @unique
  firstName String
  lastName  String
  bio       String? @db.VarChar(160)
  avatarUrl String?
  website   String?
  location  String?
  role      Role    @default(USER)

  posts         Post[]
  followers     Follow[]       @relation("followers")
  following     Follow[]       @relation("following")
  comments      Comment[]
  notifications Notification[] @relation("recipientNotifs")
  sentNotifs    Notification[] @relation("senderNotifs")
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id           String         @id @default(uuid())
  content      String         @db.VarChar(280)
  imageUrl     String?
  category     PostCategory   @default(GENERAL)
  author       Profile        @relation(fields: [authorId], references: [id])
  authorId     String
  isActive     Boolean        @default(true)
  likeCount    Int            @default(0)
  commentCount Int            @default(0)
  likes        Like[]
  comments     Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

model Follow {
  id          String   @id @default(uuid())
  follower    Profile  @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   Profile  @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      Profile  @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(200)
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    Profile  @relation(fields: [authorId], references: [id])
  authorId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Notification {
  id               String           @id @default(uuid())
  recipient        Profile          @relation("recipientNotifs", fields: [recipientId], references: [id])
  recipientId      String
  sender           Profile          @relation("senderNotifs", fields: [senderId], references: [id])
  senderId         String
  notificationType NotificationType
  post             Post?            @relation(fields: [postId], references: [id])
  postId           String?
  message          String           @db.VarChar(200)
  isRead           Boolean          @default(false)
  createdAt        DateTime         @default(now())
}
